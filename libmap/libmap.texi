\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename libmap.info
@settitle libmap
@setchapternewpage off
@c %**end of header
@synindex tp vr

@include version.texi

@ifinfo
@format
START-INFO-DIR-ENTRY
* libmap: (libmap).             Associative arrays
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@ifinfo
This file documents libmap @value{VERSION}

Copyright 1996 Dieter Baron

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph


@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end ifinfo


@titlepage
@title libmap -- A Library for Associative Arrays
@subtitle For version @value{VERSION}, @value{UPDATED}
@author Dieter Baron
@c copyright page
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1996 Dieter Baron
@sp 2
This is a draft edition of the libmap documentation,@*
and is consistent with libmap @value{VERSION}.@*
@sp 2
@ignore
Published by the Free Software Foundation @*
59 Template Place - Suite 330, @*
Boston, MA 02111-1307 USA @*

@end ignore
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage

@ifinfo
@c ================================================================
@node Top, Introduction, (dir), (dir)
@comment  node-name,  next,  previous,  up
@top libmap

This file documents libmap, a library for associative arrays.  This
edition documents version @value{VERSION}.

libmap is a library that provides highly customizable associative
arrays, implemented as hash tables with external linking.

@menu
* Introduction::	Design Philosophy of libmap
* Helper::              Helper Functions
* Creating::            Creating and Destroying Maps
* Manipulating::        Manipulating Maps
* Iterating::           Iterating Through Maps
* Defaults::            Default Values

* Index::
* Index of Functions::
* Index of Variables and Types::
@end menu
@end ifinfo

@c ================================================================
@node Introduction
@chapter Introduction
@cindex introduction
@cindex map
@cindex hash table

Associative arrays (also called maps) are arrays whose indices, called
keys, are not natural numbers.  Most often, they are strings.

One way to implement associative arrays is to use hash tables: key/value
pairs are stored in an ordinary array, at the index specified by the
key's hash, which acts like a fingerprint.  This is both easy to
implement and efficient, if the function used to compute the hash value
is fast and rarely generates the same value for different keys.

There are different ways to handle collisions (two different keys with
the same hash value); one is to use linked lists as array elements, and
to store the key/value pairs in these lists (one for each hash value).
This method is not the fastest, but does not pose an arbitrary limit on
the size of the associative array.

Still, to get good performance, the size of the hash table should be
about 5 times as large as the expected number of entries (to avoid
collisions), but space can be traded off for time.

For a thorough discussion of hash tables, see @cite{The Art of Computer
Programming, Vol. III: Searching and Sorting}, by Donald E. Knuth.

Since C is a strongly typed language, care must be taken in the choice
of types for keys and values.  In libmap, both are pointers to
@code{void}.


@c ================================================================
@node Helper
@chapter Helper Functions
@cindex helper function

The functions used to compute hash values from keys and test keys on
equality depend on the type of keys used.  To keep libmap general, such
functions can be provided by the application, although reasonable default
functions are provided for the most common case: strings.

Also, a handful of housekeeping functions can be provided by the
application.  These functions are collectively called helper functions,
and can be specified per map.

The helper functions are:

@deftypefn {Helper Function} int equal (void *@var{key1}, void *@var{key2})
Used to compare @var{key1} and @var{key2} for equality; it is expected
to return 0 if the two keys are equal, non-zero otherwise.
@c XXX: keys not neccecarily returned by cpykey

Reasonable functions for strings are @code{strcmp} or @code{strcasecmp}.
@end deftypefn

@deftypefn {Helper Function} {unsigned int} hash (void *@var{key}, int @var{size})
Used to compute @var{key}'s hash value; @var{size} is the size of the
table.  The return value should be @var{key}'s hash value, which may be
larger than @var{size} (@var{size} is provided mainly to allow for more
efficient hash function implementations).

A hash function for strings is provided by libmap: @code{map_strhash}
@end deftypefn

@deftypefn {Helper Function} {void *} cpykey (void *@var{key})
Used to obtain a copy of @var{key} to place in the map, which is
necessary, for example, if @code{map_insert} is called with keys that
have automatic storage duration.  One could use @code{strdup} if keys
are strings.

If this member in a map is a null pointer, keys are placed in the map
as they are passed to @code{map_insert}.
@end deftypefn

@deftypefn {Helper Function} void delkey (void *@var{key})
Used to delete the copy of @var{key} obtained by @code{cpykey}.

If this member in a map is a null pointer, no special action is taken to
delete keys.
@end deftypefn

@deftypefn {Helper Function} void delval (void *@var{value})
Used to delete @var{value} when @code{map_delete} or @code{map_free} is
called with non-zero @var{delvaluep}.

If this member in a map is a null pointer, no special action is taken to
delete values (@var{delvaleup} has no effect).
@end deftypefn

@deftp {Data Type} map
This is the type used to hold a map; a pointer to @code{map} is the first
parameter of most functions in this library, specifying the map to
operate on.

It has one member for each helper function described above, with the
same name, which holds a pointer to the functions used by this map.
These can be set by the application; however, @code{hash}, @code{equal},
and @code{cpykey} should not be changed once entries have been inserted.
Changing @code{delkey} or @code{delval} in a non-empty map has the
obvious effect: following deletes use the new functions.
@end deftp


@c ================================================================
@node Creating
@chapter Creating and Destroying Maps
@cindex creating
@cindex destroying

@deftypefun {map *} map_new (int @var{size})
The @code{map_new} function creates a new map of @var{size}, or
@code{map_def_size} if @var{size} is 0.  All helper functions are set to
their default values.

@code{map_new} returns the newly created map, or a null pointer if
creation fails.
@end deftypefun

@deftypefun {map *} map_new2 (int @var{size}, int (*@var{equal})(), int (*@var{hash})(), void *(*@var{cpykey})(), void (*@var{delkey})(), void (*@var{delval})())
The @code{map_new2} function is much like @code{map_new}, except that
all helper functions are given as arguments.  If any of them is
@code{MAP_DFL}, the corresponding default value is taken.

@code{map_new2} returns the newly created map, or a null pointer if
creation fails.
@end deftypefun

@deftypefun void map_free (map *@var{m}, int @var{delvaluep})
The function @code{map_free} deletes map @var{m} and frees all the
storage used by it.

If @var{delvaluep} is non-zero, the values stored in the
map are deleted by the @code{delval} helper function.
@end deftypefun


@c ================================================================
@node Manipulating
@chapter Manipulating Maps
@cindex manipulating

@deftypefun {void *} map_lookup (map *@var{m}, void *@var{key})
Look up @var{key} in @var{m}.

Returns the value associated with @var{key}, or a null pointer if
@var{key} is not in @var{m}.
@end deftypefun

@deftypefun {void **} map_insert (map *@var{m}, void *@var{key})
Look up @var{key} in @var{m}, creating a new entry if necessary.

Returns a pointer to the value associated with @var{key} in @var{m}, or
a pointer to a null pointer if there was no value; storing a new value
at the location pointed to by the value returned associates it with
@var{key}.
@end deftypefun

@deftypefun void map_delete (map *@var{m}, void *@var{key}, int @var{delvaluep})
Delete entry with key @var{key} from @var{m}, deleting its value with
@code{delval} if @var{delvaluep} is non-zero.
@end deftypefun


@c ================================================================
@node Iterating
@chapter Iterating Through Maps
@cindex iterating

Some applications require a means to iterate over all entries in a map.
Such a mechanism is provided, although the order in which the entries
are processed is indeterminate.

@deftp {Data Type} map_iter
This type is used to record an iteration's state between calls to the
iteration functions.

Since this is kept separate from the map iterated through, multiple
iterations through the same map can be made simultaneous.
@end deftp

If entries are added to or removed from a map while an iteration is in
progress, entries may be lost or duplicated in the iteration.  If values
of existing entries are changed, however, no such ill side effects will
occur.

@deftypefun {map_iter *} map_start (map *@var{m})
This function starts an iteration through @var{m}.  A new @code{map_iter}
is created and return; if creation failes, a null pointer is returned.
@end deftypefun

@deftypefun int map_next (map_iter *@var{iterator}, void **@var{key}, void **@var{value})
@code{map_next} stores the next entry in @var{key} and @var{value}.

It returns 0 if successful; if there are no more entries, it returns -1
and leaves @var{key} and @var{value} unchanged.
@end deftypefun

@deftypefun void map_stop (map_iter *@var{iterator})
This function is used to terminate an iteration and frees the storage
used by the @code{map_iter} structure.
@end deftypefun


@c ================================================================
@node Defaults
@chapter Default Values
@cindex default values

The default values used by @code{map_new} and @code{map_new2} are stored
in global variables and can be changed by the application.

The global variables and their values upon startup:

@vtable @code
@item map_def_size
1024
@item map_def_equal
@code{strcmp}
@item map_def_hash
@code{map_strhash}
@item map_def_cpykey
@code{strdup}
@item map_def_delkey
@code{free}
@item map_def_delval
@code{NULL}
@end vtable

@code{map_def_size} specifies the default size of a map's hash table
@pxref{Creating}.  For a description of the helper functions, see
@ref{Helper}.

On systems without @code{strdup}, a replacement function (with the same
functionality but a different name) is included in the library and used
in @code{map_def_cpykey}.
@iftex
@page
@end iftex
@c ================================================================
@node Index
@unnumbered Index

@printindex cp

@node Index of Functions
@unnumbered Index of Functions

@printindex fn

@node Index of Variables and Types
@unnumbered Index of Variables and Types

@printindex vr

@contents
@bye
